{
	"cvar": {
		"set_string": {
			"name": "cvar.set_string",
			"args": [
				{
					"name": "value",
					"description": "String value"
				}
			]
		},
		"get_string": {
			"name": "cvar.get_string",
			"description": "Returns nil on failure.",
			"args": []
		},
		"set_float": {
			"name": "cvar.set_float",
			"args": [
				{
					"name": "value",
					"description": "Float value"
				}
			]
		},
		"set_raw_float": {
			"name": "cvar.set_raw_float",
			"description": "This sets the float value without changing the integer and string values.",
			"args": [
				{
					"name": "value",
					"description": "Float value"
				}
			]
		},
		"get_float": {
			"name": "cvar.get_float",
			"description": "Returns nil if called on a ConCommand.",
			"args": []
		},
		"set_int": {
			"name": "cvar.set_int",
			"args": [
				{
					"name": "value",
					"description": "Integer value"
				}
			]
		},
		"set_raw_int": {
			"name": "cvar.set_raw_int",
			"description": "This sets the integer value without changing the float and string values.",
			"args": [
				{
					"name": "value",
					"description": "Integer value"
				}
			]
		},
		"get_int": {
			"name": "cvar.get_int",
			"description": "Returns nil if called on a ConCommand.",
			"args": []
		},
		"invoke_callback": {
			"name": "cvar.invoke_callback",
			"args": []
		}
	},
	"globals": {
		"realtime": {
			"name": "globals.realtime",
			"description": "Returns the local time in seconds.",
			"args": []
		},
		"curtime": {
			"name": "globals.curtime",
			"description": "Returns the game time in seconds. This number is synchronized with the server.",
			"args": []
		},
		"frametime": {
			"name": "globals.frametime",
			"description": "Returns the number of seconds elapsed during the last game frame.",
			"args": []
		},
		"absoluteframetime": {
			"name": "globals.absoluteframetime",
			"description": "Returns the number of seconds elapsed during the last game frame.",
			"args": []
		},
		"maxplayers": {
			"name": "globals.maxplayers",
			"description": "Returns the maximum number of players in the server.",
			"args": []
		},
		"tickcount": {
			"name": "globals.tickcount",
			"description": "Returns the number of ticks elapsed in the server.",
			"args": []
		},
		"tickinterval": {
			"name": "globals.tickinterval",
			"description": "Returns the time elapsed in one game tick in seconds.",
			"args": []
		},
		"framecount": {
			"name": "globals.framecount",
			"description": "Returns the number of frames since the game started",
			"args": []
		},
		"mapname": {
			"name": "globals.mapname",
			"description": "Returns the name of the loaded map, or nil if you are not in game.",
			"args": []
		},
		"lastoutgoingcommand": {
			"name": "globals.lastoutgoingcommand",
			"description": "Returns the command number of the last outgoing command.",
			"args": []
		}
	},
	"entity": {
		"get_local_player": {
			"name": "entity.get_local_player",
			"description": "Returns the entity index for the local player, or nil on failure.",
			"args": []
		},
		"get_all": {
			"name": "entity.get_all",
			"description": "Returns an array of entity indices. Pass no arguments for all entities.",
			"args": [
				{
					"name": "classname",
					"description": "Optional string that specifies the class name of entities that will be added to the list, for example \"CCSPlayer\"."
				}
			]
		},
		"get_players": {
			"name": "entity.get_players",
			"description": "Returns an array of player entity indices. Dormant and dead players will not be added to the list.",
			"args": [
				{
					"name": "enemies_only",
					"description": "Optional. If true then you and the players on your team will not be added to the list."
				}
			]
		},
		"get_game_rules": {
			"name": "entity.get_game_rules",
			"description": "Returns entity index of CCSGameRulesProxy instance, or nil if none exists.",
			"args": []
		},
		"get_player_resource": {
			"name": "entity.get_player_resource",
			"description": "Returns entity index of CCSPlayerResource instance, or nil if none exists.",
			"args": []
		},
		"get_classname": {
			"name": "entity.get_classname",
			"description": "Returns the name of the entity's class, or nil on failure.",
			"args": [
				{
					"name": "ent",
					"description": "Entity index."
				}
			]
		},
		"set_prop": {
			"name": "entity.set_prop",
			"args": [
				{
					"name": "ent",
					"description": "Entity index."
				},
				{
					"name": "propname",
					"description": "Name of the networked property."
				},
				{
					"name": "value",
					"description": "The property will be set to this value. For vectors or angles, separate the components by commas."
				},
				{
					"name": "array_index",
					"description": "Optional. If propname is an array, the value at this array index will be set."
				}
			]
		},
		"get_prop": {
			"name": "entity.get_prop",
			"description": "Returns the value of the property, or nil on failure. For vectors or angles, this returns three values.",
			"args": [
				{
					"name": "ent",
					"description": "Entity index."
				},
				{
					"name": "propname",
					"description": "Name of the networked property."
				},
				{
					"name": "array_index",
					"description": "Optional. If propname is an array, the value at this array index will be returned."
				}
			]
		},
		"is_enemy": {
			"name": "entity.is_enemy",
			"description": "Returns true if the entity is on the other team.",
			"args": [
				{
					"name": "ent",
					"description": "Entity index."
				}
			]
		},
		"is_alive": {
			"name": "entity.is_alive",
			"description": "Returns true if the player is not dead.",
			"args": [
				{
					"name": "ent",
					"description": "Entity index."
				}
			]
		},
		"is_dormant": {
			"name": "entity.is_dormant",
			"description": "Returns true if the player is not dormant.",
			"args": [
				{
					"name": "ent",
					"description": "Entity index."
				}
			]
		},
		"get_player_name": {
			"name": "entity.get_player_name",
			"description": "Returns the player's name, or the string \"unknown\" on failure.",
			"args": [
				{
					"name": "ent",
					"description": "Player entity index."
				}
			]
		},
		"get_player_weapon": {
			"name": "entity.get_player_weapon",
			"description": "Returns the entity index of the player's active weapon, or nil if the player is not alive, dormant, etc.",
			"args": [
				{
					"name": "ent",
					"description": "Player entity index."
				}
			]
		},
		"hitbox_position": {
			"name": "entity.hitbox_position",
			"description": "Returns world coordinates x, y, z, or nil on failure.",
			"args": [
				{
					"name": "player",
					"description": "Entity index of the player."
				},
				{
					"name": "hitbox",
					"description": "Either a string of the hitbox name, or an integer index of the hitbox."
				}
			]
		},
		"get_steam64": {
			"name": "entity.get_steam64",
			"description": "Returns steamID3, or nil on failure.",
			"args": [
				{
					"name": "player",
					"description": "Entity index of the player."
				}
			]
		},
		"get_bounding_box": {
			"name": "entity.get_bounding_box",
			"description": "Returns x1, y1, x2, y2, alpha_multiplier. The contents of x1, y1, x2, y2 must be ignored when alpha_multiplier is zero, which indicates that the bounding box is invalid and should not be drawn.",
			"args": [
				{
					"name": "player",
					"description": "Entity index of the player."
				}
			]
		}
	},
	"client": {
		"set_event_callback": {
			"name": "client.set_event_callback",
			"description": "Raises an error and prints a message in console upon failure.",
			"args": [
				{
					"name": "event_name",
					"description": "Name of the event."
				},
				{
					"name": "callback",
					"description": "Lua function to call when this event occurs."
				}
			]
		},
		"log": {
			"name": "client.log",
			"args": [
				{
					"name": "msg",
					"description": "The message"
				},
				{
					"name": "...",
					"description": "Optional comma-separated arguments to concatenate with msg."
				}
			]
		},
		"color_log": {
			"name": "client.color_log",
			"args": [
				{
					"name": "r",
					"description": "Red (0-255)"
				},
				{
					"name": "g",
					"description": "Red (0-255)"
				},
				{
					"name": "b",
					"description": "Red (0-255)"
				},
				{
					"name": "msg",
					"description": "The message"
				},
				{
					"name": "...",
					"description": "Optional comma-separated arguments to concatenate with msg."
				}
			]
		},
		"exec": {
			"name": "client.exec",
			"args": [
				{
					"name": "cmd",
					"description": "The console command(s) to execute."
				},
				{
					"name": "...",
					"description": "Optional comma-separated arguments to concatenate with cmd."
				}
			]
		},
		"userid_to_entindex": {
			"name": "client.userid_to_entindex",
			"description": "Returns the entity index, or 0 on failure.",
			"args": [
				{
					"name": "userid",
					"description": "This is given by some game events."
				}
			]
		},
		"draw_debug_text": {
			"name": "client.draw_debug_text",
			"description": "Avoid calling this during the paint event.",
			"args": [
				{
					"name": "x",
					"description": "Position in world space"
				},
				{
					"name": "y",
					"description": "Position in world space"
				},
				{
					"name": "z",
					"description": "Position in world space"
				},
				{
					"name": "line_offset",
					"description": "Used for vertical alignment, use 0 for the first line."
				},
				{
					"name": "duration",
					"description": "Time in seconds that the text will remain on the screen."
				},
				{
					"name": "r",
					"description": "Red (1-255)"
				},
				{
					"name": "g",
					"description": "Green (1-255)"
				},
				{
					"name": "b",
					"description": "Blue (1-255)"
				},
				{
					"name": "a",
					"description": "Alpha (1-255)"
				},
				{
					"name": "...",
					"description": "The text that will be drawn"
				}
			]
		},
		"draw_hitboxes": {
			"name": "client.draw_hitboxes",
			"description": "Draws hitbox overlays. Avoid calling this during the paint event.",
			"args": [
				{
					"name": "entindex",
					"description": "Entity index"
				},
				{
					"name": "duration",
					"description": "Time in seconds"
				},
				{
					"name": "hitboxes",
					"description": "Either the hitbox index, an array of hitbox indices, or 19 for all hitboxes"
				},
				{
					"name": "r",
					"description": "Red (1-255)"
				},
				{
					"name": "g",
					"description": "Green (1-255)"
				},
				{
					"name": "b",
					"description": "Blue (1-255)"
				},
				{
					"name": "a",
					"description": "Alpha (1-255)"
				},
				{
					"name": "tick",
					"description": "Optional integer"
				}
			]
		},
		"random_int": {
			"name": "client.random_int",
			"description": "Returns a random integer between minimum and maximum.",
			"args": [
				{
					"name": "minimum",
					"description": "Lowest possible result"
				},
				{
					"name": "maximum",
					"description": "Highest possible result"
				}
			]
		},
		"random_float": {
			"name": "client.random_float",
			"description": "Returns a random float between minimum and maximum.",
			"args": [
				{
					"name": "minimum",
					"description": "Lowest possible result"
				},
				{
					"name": "maximum",
					"description": "Highest possible result"
				}
			]
		},
		"screen_size": {
			"name": "client.screen_size",
			"description": "Returns (width, height).",
			"args": []
		},
		"visible": {
			"name": "client.visible",
			"description": "Returns true if the position is visible. For example, you could use a player's origin to see if they are visible.",
			"args": [
				{
					"name": "x",
					"description": "Position in world space"
				},
				{
					"name": "y",
					"description": "Position in world space"
				},
				{
					"name": "z",
					"description": "Position in world space"
				}
			]
		},
		"trace_line": {
			"name": "client.trace_line",
			"description": "Returns fraction, entindex. fraction is a percentage in the range [0.0, 1.0] that tells you how far the trace went before hitting something, so 1.0 means nothing was hit. entindex is the entity index that hit, or -1 if no entity was hit.",
			"args": [
				{
					"name": "skip_entindex",
					"description": "Ignore this entity while tracing"
				},
				{
					"name": "from_x",
					"description": "Position in world space"
				},
				{
					"name": "from_y",
					"description": "Position in world space"
				},
				{
					"name": "from_z",
					"description": "Position in world space"
				},
				{
					"name": "to_x",
					"description": "Position in world space"
				},
				{
					"name": "to_y",
					"description": "Position in world space"
				},
				{
					"name": "to_z",
					"description": "Position in world space"
				}
			]
		},
		"trace_bullet": {
			"name": "client.trace_bullet",
			"description": "Returns entindex, damage. Entindex is nil when no player is hit.",
			"args": [
				{
					"name": "from_player",
					"description": "Entity index of the player whose weapon will be used for this trace"
				},
				{
					"name": "from_x",
					"description": "Position in world space"
				},
				{
					"name": "from_y",
					"description": "Position in world space"
				},
				{
					"name": "from_z",
					"description": "Position in world space"
				},
				{
					"name": "to_x",
					"description": "Position in world space"
				},
				{
					"name": "to_y",
					"description": "Position in world space"
				},
				{
					"name": "to_z",
					"description": "Position in world space"
				}
			]
		},
		"scale_damage": {
			"name": "client.scale_damage",
			"description": "Returns adjusted damage for the specified hitgroup",
			"args": [
				{
					"name": "entindex",
					"description": "Player entity index"
				},
				{
					"name": "hitgroup",
					"description": "Hit group index"
				},
				{
					"name": "damage",
					"description": "Damage"
				}
			]
		},
		"delay_call": {
			"name": "client.delay_call",
			"args": [
				{
					"name": "delay",
					"description": "Time in seconds to wait before calling callback."
				},
				{
					"name": "callback",
					"description": "The lua function that will be called after delay seconds."
				},
				{
					"name": "...",
					"description": "Optional arguments that will be passed to the callback."
				}
			]
		},
		"latency": {
			"name": "client.latency",
			"description": "Returns your latency in seconds.",
			"args": []
		},
		"real_latency": {
				"description": "Returns your current real latency, regardless of ping spike."
		},
		"camera_angles": {
			"name": "client.camera_angles",
			"description": "Set camera angles",
			"args": [
				{
					"name": "pitch",
					"description": "Optional. If set, pitch that your camera angles will be set to"
				},
				{
					"name": "yaw",
					"description": "Optional. If set, pitch that your camera angles will be set to"
				}
			]
		},
		"timestamp": {
			"name": "client.timestamp",
			"description": "Returns high precision timestamp in milliseconds.",
			"args": []
		},
		"eye_position": {
			"name": "client.eye_position",
			"description": "Returns x, y, z world coordinates of the local player's eye position, or nil on failure.",
			"args": []
		},
		"set_clan_tag": {
			"name": "client.set_clan_tag",
			"description": "The clan tag is removed if no argument is passed or if it is an empty string. Additional arguments will be concatenated similar to client.log.",
			"args": [
				{
					"name": "...",
					"description": "The text that will be drawn"
				}
			]
		},
		"system_time": {
			"name": "client.system_time",
			"args": []
		},
		"reload_active_scripts": {
			"name": "client.reload_active_scripts",
			"description": "Reloads all scripts the following frame.",
			"args": []
		},
		"request_full_update": {
			"name": "client.request_full_update",
			"description": "Request cl_fullupdate and update all networked stuff.",
			"args": []
		}
	},
	"ui": {
		"new_checkbox": {
			"name": "ui.new_checkbox",
			"description": "Returns a special value that can be passed to ui.get and ui.set, or throws an error on failure.",
			"args": [
				{
					"name": "tab",
					"description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, or VISUALS."
				},
				{
					"name": "container",
					"description": "The name of the existing container to which this control will be added."
				},
				{
					"name": "name",
					"description": "The name of the checkbox."
				}
			]
		},
		"new_slider": {
			"name": "ui.new_slider",
			"description": "Returns a special value that can be passed to ui.get and ui.set, or throws an error on failure.",
			"args": [
				{
					"name": "tab",
					"description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, or VISUALS."
				},
				{
					"name": "container",
					"description": "The name of the existing container to which this control will be added."
				},
				{
					"name": "name",
					"description": "The name of the slider."
				},
				{
					"name": "min",
					"description": "The minimum value that can be set using the slider."
				},
				{
					"name": "max",
					"description": "The maximum value that can be set using the slider."
				},
				{
					"name": "init_value",
					"description": "Optional integer. The initial value. If not provided, the initial value will be min."
				},
				{
					"name": "show_tooltip",
					"description": "Optional boolean. true if the slider should display its current value."
				},
				{
					"name": "unit",
					"description": "Optional string that is two characters or less. This will be appended to the display value. For example, \"px\" for pixels or \"%\" for a percentage."
				},
				{
					"name": "scale",
					"description": "Optional The display value will be multiplied by this scale. For example, 0.1 will make a slider with the range [0-1800] show as 0.0-180.0 with one decimal place."
				},
				{
					"name": "tooltips",
					"description": "Optional table used to override the tooltip for the specified values. The key must be within min-max. The value is a string that will be shown instead of the numeric value whenever that value is selected."
				}
			]
		},
		"new_combobox": {
			"name": "ui.new_combobox",
			"description": "Returns a special value that can be passed to ui.get and ui.set, or throws an error on failure.",
			"args": [
				{
					"name": "tab",
					"description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, or VISUALS."
				},
				{
					"name": "container",
					"description": "The name of the existing container to which this control will be added."
				},
				{
					"name": "name",
					"description": "The name of the combobox."
				},
				{
					"name": "...",
					"description": "One or more comma separated string values that will be added to the combobox. Alternatively, a table of strings that will be added."
				}
			]
		},
		"new_multiselect": {
			"name": "ui.new_multiselect",
			"description": "Returns a special value that can be passed to ui.get and ui.set, or throws an error on failure.",
			"args": [
				{
					"name": "tab",
					"description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, or VISUALS."
				},
				{
					"name": "container",
					"description": "The name of the existing container to which this control will be added."
				},
				{
					"name": "name",
					"description": "The name of the multiselect."
				},
				{
					"name": "...",
					"description": "One or more comma separated string values that will be added to the combobox. Alternatively, a table of strings that will be added."
				}
			]
		},
		"new_hotkey": {
			"name": "ui.new_hotkey",
			"description": "Returns a special value that can be passed to ui.get to see if the hotkey is pressed, or throws an error on failure.",
			"args": [
				{
					"name": "tab",
					"description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, or VISUALS."
				},
				{
					"name": "container",
					"description": "The name of the existing container to which this control will be added."
				},
				{
					"name": "name",
					"description": "The name of the hotkey."
				},
				{
					"name": "inline",
					"description": "Optional boolean. If set to true, the hotkey will be placed to the right of the preceding menu item."
				}
			]
		},
		"new_button": {
			"name": "ui.new_button",
			"description": "Throws an error on failure. The return value should not be used with ui.set or ui.get.",
			"args": [
				{
					"name": "tab",
					"description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, or VISUALS."
				},
				{
					"name": "container",
					"description": "The name of the existing container to which this checkbox will be added."
				},
				{
					"name": "name",
					"description": "The name of the button."
				},
				{
					"name": "callback",
					"description": "The lua function that will be called when the button is pressed."
				}
			]
		},
		"new_color_picker": {
			"name": "ui.new_color_picker",
			"description": "Throws an error on failure. The color picker is placed to the right of the previous menu item.",
			"args": [
				{
					"name": "tab",
					"description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, or VISUALS."
				},
				{
					"name": "container",
					"description": "The name of the existing container to which this checkbox will be added."
				},
				{
					"name": "name",
					"description": "The name of the color picker. This will not be shown, it is only used to identify this item in saved configs."
				},
				{
					"name": "r",
					"description": "Optional initial red value (0-255)"
				},
				{
					"name": "g",
					"description": "Optional initial green value (0-255)"
				},
				{
					"name": "b",
					"description": "Optional initial blue value (0-255)"
				},
				{
					"name": "a",
					"description": "Optional initial alpha value (0-255)"
				}
			]
		},
		"new_textbox": {
			"name": "ui.new_textbox",
			"description": "Throws an error on failure. Returns a special value that can be used with ui.get",
			"args": [
				{
					"name": "tab",
					"description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, or VISUALS."
				},
				{
					"name": "container",
					"description": "The name of the existing container to which this textbox will be added."
				},
				{
					"name": "name",
					"description": "The name of the menu item."
				}
			]
		},
		"reference": {
			"name": "ui.reference",
			"description": "Avoid calling this from inside a function. Returns a reference that can be passed to ui.get and ui.set, or throws an error on failure. This allows you to access a built-in pre-existing menu items. This function returns multiple values when the specified menu item is followed by unnamed menu items, for example a color picker or a hotkey.",
			"args": [
				{
					"name": "tab",
					"description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, or VISUALS."
				},
				{
					"name": "container",
					"description": "The name of the existing container to which this checkbox will be added."
				},
				{
					"name": "name",
					"description": "The name of the menu item."
				}
			]
		},
		"set": {
			"name": "ui.set",
			"description": "For checkboxes, pass true or false. For a slider, pass a number that is within the slider's minimum/maximum values. For a combobox, pass a string value. For a multiselect combobox, pass zero or more strings. For referenced buttons, param is ignored and the button's callback is invoked. For color pickers, pass the arguments r, g, b, a.",
			"args": [
				{
					"name": "item",
					"description": "The result of either ui.new_checkbox, ui.new_slider, or ui.reference."
				},
				{
					"name": "value",
					"description": "The value to which the menu item will be set."
				},
				{
					"name": "...",
					"description": "Optional. For multiselect comboboxes, you may want to set more than one option."
				}
			]
		},
		"get": {
			"name": "ui.get",
			"description": "For a checkbox, returns true or false. For a slider, returns an integer. For a combobox, returns a string. For a multiselect combobox, returns an array of strings. For a hotkey, returns true if the hotkey is active. For a color picker, returns r, g, b, a. Throws an error on failure.",
			"args": [
				{
					"name": "item",
					"description": "The special value returned by ui.new_checkbox, ui.new_slider, ui.new_combobox, ui.new_hotkey, or ui.reference."
				}
			]
		},
		"set_callback": {
			"name": "ui.set_callback",
			"args": [
				{
					"name": "item",
					"description": "The special value returned by ui.new_*. Do not try passing a reference to an existing menu item."
				},
				{
					"name": "callback",
					"description": "Lua function that will be called when the menu item changes values. For example, this will be called when the user checks or unchecks a checkbox."
				}
			]
		},
		"set_visible": {
			"name": "ui.set_visible",
			"args": [
				{
					"name": "item",
					"description": "A menu item reference."
				},
				{
					"name": "visible",
					"description": "Boolean. Pass false to hide the control from the menu."
				}
			]
		},
		"update": {
			"name": "ui.update",
			"description": "Change current values for e.g. in listbox to passed.",
			"args": [
				{
					"name": "item",
					"description": "A menu item reference."
				},
				{
					"name": "...",
					"description": "New values for e.g. listbox. Can be passed comma separated values or just table."
				}
			]
		},
		"is_menu_open": {
			"name": "ui.is_menu_open",
			"description": "Returns true if the menu is currently open.",
			"args": []
		},
		"mouse_position": {
			"name": "ui.mouse_position",
			"description": "Returns current mouse coordinates x, y",
			"args": []
		}
	},
	"renderer": {
		"text": {
			"name": "renderer.text",
			"description": "This can only be called from the paint callback.",
			"args": [
				{
					"name": "x",
					"description": "Screen coordinate"
				},
				{
					"name": "y",
					"description": "Screen coordinate"
				},
				{
					"name": "r",
					"description": "Red (1-255)"
				},
				{
					"name": "g",
					"description": "Green (1-255)"
				},
				{
					"name": "b",
					"description": "Blue (1-255)"
				},
				{
					"name": "a",
					"description": "Alpha (1-255)"
				},
				{
					"name": "flags",
					"description": "\"+\" for large text, \"-\" for small text, \"c\" for centered text, \"r\" for right-aligned text, \"b\" for bold text. \"c\" can be combined with other flags. nil can be specified for normal sized uncentered text."
				},
				{
					"name": "max_width",
					"description": "Text will be clipped if it exceeds this width in pixels. Use 0 for no limit."
				},
				{
					"name": "...",
					"description": "Text that will be drawn"
				}
			]
		},
		"measure_text": {
			"name": "renderer.measure_text",
			"description": "Returns width, height. This can only be called from the paint callback.",
			"args": [
				{
					"name": "flags",
					"description": "\"+\" for large text, \"-\" for small text, or nil for normal sized text."
				},
				{
					"name": "...",
					"description": "Text that will be measured"
				}
			]
		},
		"rectangle": {
			"name": "renderer.rectangle",
			"description": "This can only be called from the paint callback.",
			"args": [
				{
					"name": "x",
					"description": "Screen coordinate"
				},
				{
					"name": "y",
					"description": "Screen coordinate"
				},
				{
					"name": "w",
					"description": "Width in pixels"
				},
				{
					"name": "h",
					"description": "Height in pixels"
				},
				{
					"name": "r",
					"description": "Red (1-255)"
				},
				{
					"name": "g",
					"description": "Green (1-255)"
				},
				{
					"name": "b",
					"description": "Blue (1-255)"
				},
				{
					"name": "a",
					"description": "Alpha (1-255)"
				}
			]
		},
		"line": {
			"name": "renderer.line",
			"description": "This can only be called from the paint callback.",
			"args": [
				{
					"name": "xa",
					"description": "Screen coordinate of point A"
				},
				{
					"name": "ya",
					"description": "Screen coordinate of point A"
				},
				{
					"name": "xb",
					"description": "Screen coordinate of point B"
				},
				{
					"name": "yb",
					"description": "Screen coordinate of point B"
				},
				{
					"name": "r",
					"description": "Red (1-255)"
				},
				{
					"name": "g",
					"description": "Green (1-255)"
				},
				{
					"name": "b",
					"description": "Blue (1-255)"
				},
				{
					"name": "a",
					"description": "Alpha (1-255)"
				}
			]
		},
		"gradient": {
			"name": "renderer.gradient",
			"description": "This can only be called from the paint callback.",
			"args": [
				{
					"name": "x",
					"description": "Screen coordinate"
				},
				{
					"name": "y",
					"description": "Screen coordinate"
				},
				{
					"name": "w",
					"description": "Width in pixels"
				},
				{
					"name": "h",
					"description": "Height in pixels"
				},
				{
					"name": "r1",
					"description": "Red (1-255)"
				},
				{
					"name": "g1",
					"description": "Green (1-255)"
				},
				{
					"name": "b1",
					"description": "Blue (1-255)"
				},
				{
					"name": "a1",
					"description": "Alpha (1-255)"
				},
				{
					"name": "r2",
					"description": "Red (1-255)"
				},
				{
					"name": "g2",
					"description": "Green (1-255)"
				},
				{
					"name": "b2",
					"description": "Blue (1-255)"
				},
				{
					"name": "a2",
					"description": "Alpha (1-255)"
				},
				{
					"name": "ltr",
					"description": "Left to right. Pass true for horizontal gradient, or false for vertical."
				}
			]
		},
		"circle": {
			"name": "renderer.circle",
			"description": "This can only be called from the paint callback.",
			"args": [
				{
					"name": "x",
					"description": "Screen coordinate"
				},
				{
					"name": "y",
					"description": "Screen coordinate"
				},
				{
					"name": "r",
					"description": "Red (1-255)"
				},
				{
					"name": "g",
					"description": "Green (1-255)"
				},
				{
					"name": "b",
					"description": "Blue (1-255)"
				},
				{
					"name": "a",
					"description": "Alpha (1-255)"
				},
				{
					"name": "radius",
					"description": "Radius of the circle in pixels."
				},
				{
					"name": "start_degrees",
					"description": "0 is the right side, 90 is the bottom, 180 is the left, 270 is the top."
				},
				{
					"name": "percentage",
					"description": "Must be within [0.0-1.0]. 1.0 is a full circle, 0.5 is a half circle, etc."
				}
			]
		},
		"circle_outline": {
			"name": "renderer.circle_outline",
			"description": "This can only be called from the paint callback.",
			"args": [
				{
					"name": "x",
					"description": "Screen coordinate"
				},
				{
					"name": "y",
					"description": "Screen coordinate"
				},
				{
					"name": "r",
					"description": "Red (1-255)"
				},
				{
					"name": "g",
					"description": "Green (1-255)"
				},
				{
					"name": "b",
					"description": "Blue (1-255)"
				},
				{
					"name": "a",
					"description": "Alpha (1-255)"
				},
				{
					"name": "radius",
					"description": "Radius of the circle in pixels."
				},
				{
					"name": "start_degrees",
					"description": "0 is the right side, 90 is the bottom, 180 is the left, 270 is the top."
				},
				{
					"name": "percentage",
					"description": "Must be within [0.0-1.0]. 1.0 is a full circle, 0.5 is a half circle, etc."
				},
				{
					"name": "thickness",
					"description": "Thickness of the outline in pixels."
				}
			]
		},
		"triangle": {
			"name": "renderer.triangle",
			"description": "This can only be called from the paint callback.",
			"args": [
				{
					"name": "x0",
					"description": "Screen coordinate X for point A"
				},
				{
					"name": "y0",
					"description": "Screen coordinate Y for point A"
				},
				{
					"name": "x1",
					"description": "Screen coordinate X for point B"
				},
				{
					"name": "y1",
					"description": "Screen coordinate Y for point B"
				},
				{
					"name": "x2",
					"description": "Screen coordinate X for point C"
				},
				{
					"name": "y2",
					"description": "Screen coordinate Y for point C"
				},
				{
					"name": "r",
					"description": "Red (1-255)"
				},
				{
					"name": "g",
					"description": "Green (1-255)"
				},
				{
					"name": "b",
					"description": "Blue (1-255)"
				},
				{
					"name": "a",
					"description": "Alpha (1-255)"
				}
			]
		},
		"world_to_screen": {
			"name": "renderer.world_to_screen",
			"description": "Returns two screen coordinates (x, y), or nil if the world position is not visible on your screen. This can only be called from the paint callback.",
			"args": [
				{
					"name": "x",
					"description": "Position in world space"
				},
				{
					"name": "y",
					"description": "Position in world space"
				},
				{
					"name": "z",
					"description": "Position in world space"
				}
			]
		},
		"indicator": {
			"name": "renderer.indicator",
			"description": "Returns the Y screen coordinate (vertical offset) of the drawn text, or nil on failure. This can only be called from the paint callback.",
			"args": [
				{
					"name": "r",
					"description": "Red (1-255)"
				},
				{
					"name": "g",
					"description": "Green (1-255)"
				},
				{
					"name": "b",
					"description": "Blue (1-255)"
				},
				{
					"name": "a",
					"description": "Alpha (1-255)"
				},
				{
					"name": "...",
					"description": "The text that will be drawn"
				}
			]
		},
		"texture": {
			"name": "renderer.texture",
			"args": [
				{
					"name": "id",
					"description": "Texture ID"
				},
				{
					"name": "x",
					"description": "X screen coordinate"
				},
				{
					"name": "y",
					"description": "Y screen coordinate"
				},
				{
					"name": "w",
					"description": "Width"
				},
				{
					"name": "h",
					"description": "Height"
				},
				{
					"name": "r",
					"description": "Red (0-255)"
				},
				{
					"name": "g",
					"description": "Green (0-255)"
				},
				{
					"name": "b",
					"description": "Blue (0-255)"
				},
				{
					"name": "a",
					"description": "Alpha (0-255)"
				}
			]
		},
		"load_svg": {
			"name": "renderer.load_svg",
			"description": "Returns a texture ID that can be used with renderer.texture, or nil on failure",
			"args": [
				{
					"name": "contents",
					"description": "SVG file contents"
				},
				{
					"name": "width",
					"description": "Width"
				},
				{
					"name": "height",
					"description": "Height"
				}
			]
		}
	},
	"plist": {
		"set": {
			"name": "plist.set",
			"description": "Set the special variable to any entity.",
			"args": [
				{
					"name": "entindex",
					"description": "Entity index"
				},
				{
					"name": "variable_name",
					"description": "Variable name"
				},
				{
					"name": "value",
					"description": "Value"
				}
			]
		},
		"get": {
			"name": "plist.get",
			"description": "Get the previously stored by plist.set variable at any entity.",
			"args": [
				{
					"name": "entindex",
					"description": "Entity index"
				},
				{
					"name": "variable_name",
					"description": "Variable name"
				}
			]
		}
	},
	"_G": {
        "writefile": {
            "name": "writefile",
            "description": "Writes a value to the file with name.",
            "args": [
                {
                    "name": "filename",
                    "description": "Name of file what be writen.",
                    "type": "string"
                },
                {
                    "name": "buffer",
                    "description": "Data what be writen in the file",
                    "type": "string"
                }
            ]
        },
        "readfile": {
            "name": "readfile",
            "description": "Read and return data from passed file.",
            "args": [
                {
                    "name": "filename",
                    "description": "Name of file what be readed.",
                    "type": "string"
                }
            ]
        }
    },
    "json": {
        "stringify": {
            "name": "json.stringify",
            "description": "Will serialise a Lua value into a string containing the JSON representation.",
            "args": [
                {
                    "name": "data",
                    "description": "Data what be converted to json.",
                    "type": "any"
                }
            ]
        },
        "parse": {
            "name": "json.parse",
            "description": "Will deserialise any UTF-8 JSON string into a Lua value or table.",
            "args": [
                {
                    "name": "json_text",
                    "description": "JSON encoded UTF-8 string.",
                    "type": "string"
                }
            ]
        }
    },
    "panorama": {
        "open": {
            "name": "panorama.open",
            "description": "Returns a JS context table that lets you call vanilla JS and panorama functions. Avoid calling this in event callbacks, instead, call it once and store its return value in a function.",
            "args": [
                {
                    "name": "root_panel",
                    "description": "The root panel is an optional argument and controls in which panel context the code is executed. Some APIs, for example UIToolkitAPI, require a valid root panel context. Valid root panels (highlighted = you'll probably want to use one of these): CSGOJsRegistration, CSGOTripleMonitorBackground, CSGOHud, LightSelectionEnumDropDownMenuBg, LightSelectionEnumDropDownMenuBg, LightSelectionEnumDropDownMenuBg, LightSelectionEnumDropDownMenuBg, ChatTextEntryBoxIMEControls, CSGOMainMenu, ChatInputIMEControls, CSGOLoadingScreen, CSGOIntroMovie, CSGOPopups.",
                    "type": "string",
                    "optional": true
                }
            ]
        },
        "loadstring": {
            "name": "panorama.loadstring",
            "description": "This function behaves similar to lua's loadstring but executes JS code instead. It compiles the given chunk string of JS and returns a function to call it. Avoid generating JS code on-the-fly, instead return a table of functions, which you can then call in Lua. Arguments can be passed from Lua to JS functions.",
            "args": [
                {
                    "name": "js_code",
                    "description": "JSON encoded UTF-8 string.",
                    "type": "string"
                },
                {
                    "name": "root_panel",
                    "description": "The root panel is an optional argument and controls in which panel context the code is executed. Some APIs, for example UIToolkitAPI, require a valid root panel context. Valid root panels (highlighted = you'll probably want to use one of these): CSGOJsRegistration, CSGOTripleMonitorBackground, CSGOHud, LightSelectionEnumDropDownMenuBg, LightSelectionEnumDropDownMenuBg, LightSelectionEnumDropDownMenuBg, LightSelectionEnumDropDownMenuBg, ChatTextEntryBoxIMEControls, CSGOMainMenu, ChatInputIMEControls, CSGOLoadingScreen, CSGOIntroMovie, CSGOPopups.",
                    "type": "string",
                    "optional": true
                }
            ]
        }
    }
}
