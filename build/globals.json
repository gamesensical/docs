{
  "_G": {
    "readfile": {
      "name": "readfile",
      "description": "Read and return data from passed file.",
      "args": [
        {
          "name": "filename",
          "description": "Name of file what be readed.",
          "type": "string"
        }
      ]
    },
    "writefile": {
      "name": "writefile",
      "description": "Writes a value to the file with name.",
      "args": [
        {
          "name": "filename",
          "description": "Name of file what be writen.",
          "type": "string"
        },
        {
          "name": "buffer",
          "description": "Data what be writen in the file",
          "type": "string"
        }
      ]
    }
  },
  "bit": {
    "arshift": {
      "name": "bit.arshift",
      "description": "Returns the bitwise arithmetic right-shift of its first argument by the number of bits given by the second argument.\nArithmetic right-shift treats the most-significant bit as a sign bit and replicates it.\nOnly the lower 5 bits of the shift count are used (reduces to the range [0..31]).",
      "return_type": "number",
      "args": [
        {
          "name": "x",
          "description": "number",
          "type": "number"
        },
        {
          "name": "n",
          "description": "number of bits",
          "type": "number"
        }
      ]
    },
    "band": {
      "name": "bit.band",
      "description": "Returns the bitwise and of all of its arguments. Note that more than two arguments are allowed.",
      "return_type": "number",
      "args": [
        {
          "name": "x1",
          "description": "number",
          "type": "number"
        },
        {
          "name": "[x2...]",
          "description": "number(s)",
          "type": "number"
        }
      ]
    },
    "bnot": {
      "name": "bit.bnot",
      "description": "Returns the bitwise not of its argument.",
      "return_type": "number",
      "args": [
        {
          "name": "x",
          "description": "number",
          "type": "number"
        }
      ]
    },
    "bor": {
      "name": "bit.bor",
      "description": "Returns the bitwise or of all of its arguments. Note that more than two arguments are allowed.",
      "return_type": "number",
      "args": [
        {
          "name": "x1",
          "description": "number",
          "type": "number"
        },
        {
          "name": "[x2...]",
          "description": "number(s)",
          "type": "number"
        }
      ]
    },
    "bswap": {
      "name": "bit.bswap",
      "description": "Swaps the bytes of its argument and returns it. This can be used to convert little-endian 32 bit numbers to big-endian 32 bit numbers or vice versa.",
      "return_type": "number",
      "args": [
        {
          "name": "x",
          "description": "number",
          "type": "number"
        }
      ]
    },
    "bxor": {
      "name": "bit.bxor",
      "description": "Returns the bitwise xor of all of its arguments. Note that more than two arguments are allowed.",
      "return_type": "number",
      "args": [
        {
          "name": "x1",
          "description": "number",
          "type": "number"
        },
        {
          "name": "[x2...]",
          "description": "number(s)",
          "type": "number"
        }
      ]
    },
    "lshift": {
      "name": "bit.lshift",
      "description": "Returns the bitwise logical left-shift of its first argument by the number of bits given by the second argument.\nLogical shifts treat the first argument as an unsigned number and shift in 0-bits.\nOnly the lower 5 bits of the shift count are used (reduces to the range [0..31]).",
      "return_type": "number",
      "args": [
        {
          "name": "x",
          "description": "number",
          "type": "number"
        },
        {
          "name": "n",
          "description": "number of bits",
          "type": "number"
        }
      ]
    },
    "rol": {
      "name": "bit.rol",
      "description": "Returns the bitwise left rotation of its first argument by the number of bits given by the second argument. Bits shifted out on one side are shifted back in on the other side.\nOnly the lower 5 bits of the rotate count are used (reduces to the range [0..31]).",
      "return_type": "number",
      "args": [
        {
          "name": "x",
          "description": "number",
          "type": "number"
        },
        {
          "name": "n",
          "description": "number of bits",
          "type": "number"
        }
      ]
    },
    "ror": {
      "name": "bit.ror",
      "description": "Returns the bitwise right rotation of its first argument by the number of bits given by the second argument. Bits shifted out on one side are shifted back in on the other side.\nOnly the lower 5 bits of the rotate count are used (reduces to the range [0..31]).",
      "return_type": "number",
      "args": [
        {
          "name": "x",
          "description": "number",
          "type": "number"
        },
        {
          "name": "n",
          "description": "number of bits",
          "type": "number"
        }
      ]
    },
    "rshift": {
      "name": "bit.rshift",
      "description": "Returns the bitwise logical right-shift of its first argument by the number of bits given by the second argument.\nLogical shifts treat the first argument as an unsigned number and shift in 0-bits.\nOnly the lower 5 bits of the shift count are used (reduces to the range [0..31]).",
      "return_type": "number",
      "args": [
        {
          "name": "x",
          "description": "number",
          "type": "number"
        },
        {
          "name": "n",
          "description": "number of bits",
          "type": "number"
        }
      ]
    },
    "tobit": {
      "name": "bit.tobit",
      "description": "Normalizes a number to the numeric range for bit operations and returns it. This function is usually not needed since all bit operations already normalize all of their input arguments.",
      "return_type": "number",
      "args": [
        {
          "name": "x",
          "description": "number to normalize",
          "type": "number"
        }
      ]
    },
    "tohex": {
      "name": "bit.tohex",
      "description": "Converts its first argument to a hex string. The number of hex digits is given by the absolute value of the optional second argument. Positive numbers between 1 and 8 generate lowercase hex digits. Negative numbers generate uppercase hex digits. Only the least-significant 4*|n| bits are used. The default is to generate 8 lowercase hex digits.",
      "return_type": "number",
      "args": [
        {
          "name": "x",
          "description": "number to convert",
          "type": "number"
        },
        {
          "name": "n",
          "description": "number of hex digits to return",
          "type": "number"
        }
      ]
    }
  },
  "client": {
    "camera_angles": {
      "name": "client.camera_angles",
      "description": "Get or set camera angles",
      "args": [
        {
          "name": "pitch",
          "description": "Pitch",
          "type": "number",
          "type_description": "-90 - 90"
        },
        {
          "name": "yaw",
          "description": "Yaw",
          "type": "number",
          "type_description": "-180 - 180"
        }
      ],
      "all_optional": true
    },
    "camera_position": {
      "name": "client.camera_position",
      "description": "Returns x, y, z world coordinates of the game's camera position, or nil on failure.",
      "return_type": "number, number, number",
      "args": [

      ]
    },
    "color_log": {
      "name": "client.color_log",
      "description": "Logs a colored message to console. End the string with \\0 to prevent it from adding a newline.",
      "args": [
        {
          "name": "r",
          "description": "Red (0-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "Green (0-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "Blue (0-255)",
          "type": "number"
        },
        {
          "name": "msg",
          "description": "The message",
          "type": "string"
        },
        {
          "name": "...",
          "description": "Comma-separated arguments to concatenate with msg.",
          "optional": true
        }
      ]
    },
    "create_interface": {
      "name": "client.create_interface",
      "description": "Returns a pointer to the interface, or nil on failure.",
      "return_type": "userdata",
      "return_description": "ffi pointer",
      "args": [
        {
          "name": "module_name",
          "description": "Filename of the module that contains the interface",
          "type": "string"
        },
        {
          "name": "interface_name",
          "description": "Name of the interface",
          "type": "string"
        }
      ]
    },
    "delay_call": {
      "name": "client.delay_call",
      "description": "Executes the callback after delay seconds, passing the arguments to it.",
      "args": [
        {
          "name": "delay",
          "description": "Time in seconds to wait before calling callback.",
          "type": "number"
        },
        {
          "name": "callback",
          "description": "The lua function that will be called after delay seconds.",
          "type": "function"
        },
        {
          "name": "...",
          "description": "Arguments that will be passed to the callback.",
          "optional": true
        }
      ]
    },
    "draw_debug_text": {
      "name": "client.draw_debug_text",
      "description": "Avoid calling this during the paint event.",
      "args": [
        {
          "name": "x",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "y",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "z",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "line_offset",
          "description": "Used for vertical alignment, use 0 for the first line.",
          "type": "number"
        },
        {
          "name": "duration",
          "description": "Time in seconds that the text will remain on the screen.",
          "type": "number"
        },
        {
          "name": "r",
          "description": "Red (1-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "Green (1-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "Blue (1-255)",
          "type": "number"
        },
        {
          "name": "a",
          "description": "Alpha (1-255)",
          "type": "number"
        },
        {
          "name": "...",
          "description": "The text that will be drawn"
        }
      ]
    },
    "draw_hitboxes": {
      "name": "client.draw_hitboxes",
      "description": "Draws hitbox overlays. Avoid calling this during the paint event.",
      "args": [
        {
          "name": "entindex",
          "description": "Entity index",
          "type": "number",
          "type_description": "entindex"
        },
        {
          "name": "duration",
          "description": "Time in seconds",
          "type": "number"
        },
        {
          "name": "hitboxes",
          "description": "Either the hitbox index, an array of hitbox indices, or 19 for all hitboxes",
          "type": "number",
          "type_description": "hitbox id"
        },
        {
          "name": "r",
          "description": "Red (1-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "Green (1-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "Blue (1-255)",
          "type": "number"
        },
        {
          "name": "a",
          "description": "Alpha (1-255)",
          "type": "number"
        },
        {
          "name": "tick",
          "description": "Integer",
          "optional": true,
          "type": "number"
        }
      ]
    },
    "error_log": {
      "name": "client.error_log",
      "description": "Logs a message to console in the error format and plays the sound (If Hide from OBS is disabled)",
      "args": [
        {
          "name": "msg",
          "description": "The error message",
          "type": "string"
        },
        {
          "name": "...",
          "description": "Comma-separated arguments to concatenate with msg.",
          "optional": true
        }
      ]
    },
    "exec": {
      "name": "client.exec",
      "description": "Executes a console command. Multiple commands can be combined with ';'. Be careful when passing user input (including usernames) to it.",
      "args": [
        {
          "name": "cmd",
          "description": "The console command(s) to execute.",
          "type": "string"
        },
        {
          "name": "...",
          "description": "Comma-separated arguments to concatenate with cmd.",
          "optional": true
        }
      ]
    },
    "eye_position": {
      "name": "client.eye_position",
      "description": "Returns x, y, z world coordinates of the local player's eye position, or nil on failure.",
      "return_type": "number, number, number",
      "args": [

      ]
    },
    "find_signature": {
      "name": "client.find_signature",
      "description": "Finds the specified pattern and returns a pointer to it, or nil if not found.",
      "return_type": "userdata",
      "return_description": "ffi pointer",
      "args": [
        {
          "name": "module_name",
          "description": "Filename of the module that contains the interface",
          "type": "string"
        },
        {
          "name": "pattern",
          "description": "String of the signature. Escape with \\x, replace wildcards with \\xCC",
          "type": "string"
        }
      ]
    },
    "get_model_name": {
      "name": "client.get_model_name",
      "description": "Returns model name, or nil on failure.",
      "return_type": "string",
      "args": [
        {
          "name": "model_index",
          "description": "Model index",
          "type": "number"
        }
      ]
    },
    "key_state": {
      "name": "client.key_state",
      "description": "Returns true if the key is pressed, or nil on failure",
      "return_type": "boolean",
      "args": [
        {
          "name": "key",
          "description": "Virtual key code of the key as integer. [List of virtual key codes](https://docs.microsoft.com/en-us/windows/desktop/inputdev/virtual-key-codes)",
          "type": "number"
        }
      ]
    },
    "latency": {
      "name": "client.latency",
      "description": "Returns your latency in seconds.",
      "return_type": "number",
      "args": [

      ]
    },
    "log": {
      "name": "client.log",
      "description": "Logs a message to console in the [gamesense] format.",
      "args": [
        {
          "name": "msg",
          "description": "The message",
          "type": "string"
        },
        {
          "name": "...",
          "description": "Comma-separated arguments to concatenate with msg.",
          "optional": true
        }
      ]
    },
    "random_float": {
      "name": "client.random_float",
      "description": "Returns a random float between minimum and maximum.",
      "return_type": "number",
      "args": [
        {
          "name": "minimum",
          "description": "Lowest possible result",
          "type": "number"
        },
        {
          "name": "maximum",
          "description": "Highest possible result",
          "type": "number"
        }
      ]
    },
    "random_int": {
      "name": "client.random_int",
      "description": "Returns a random integer between minimum and maximum.",
      "return_type": "number",
      "args": [
        {
          "name": "minimum",
          "description": "Lowest possible result",
          "type": "number"
        },
        {
          "name": "maximum",
          "description": "Highest possible result",
          "type": "number"
        }
      ]
    },
    "register_esp_flag": {
      "name": "client.register_esp_flag",
      "description": "Returns the x, y, z coordinates of the entity. Only works for non-dormant entities, except for players, where it will return the dormant esp origin",
      "return_type": "number, number, number",
      "args": [
        {
          "name": "flagname",
          "description": "Flag what be displayed"
        },
        {
          "name": "r",
          "description": "New red value of the material (0-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "New green value of the material (0-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "New blue value of the material (0-255)",
          "type": "number"
        },
        {
          "name": "callback_function",
          "description": "The given function will be called for every player when the ESP being drawn. Callbacks can return strings, e.g. return true, \"DUCKING\""
        }
      ]
    },
    "reload_active_scripts": {
      "name": "client.reload_active_scripts",
      "description": "Reloads all scripts the following frame.",
      "args": [

      ]
    },
    "scale_damage": {
      "name": "client.scale_damage",
      "description": "Returns adjusted damage for the specified hitgroup",
      "return_type": "number",
      "args": [
        {
          "name": "entindex",
          "description": "Player entity index",
          "type": "number",
          "type_description": "entindex"
        },
        {
          "name": "hitgroup",
          "description": "Hit group index",
          "type": "number",
          "type_description": "hitgroup id"
        },
        {
          "name": "damage",
          "description": "Damage",
          "type": "number"
        }
      ]
    },
    "screen_size": {
      "name": "client.screen_size",
      "description": "Returns (width, height).",
      "return_type": "number, number",
      "args": [

      ]
    },
    "set_clan_tag": {
      "name": "client.set_clan_tag",
      "description": "The clan tag is removed if no argument is passed or if it is an empty string. Additional arguments will be concatenated similar to client.log.",
      "args": [
        {
          "name": "...",
          "description": "The text that will be drawn"
        }
      ]
    },
    "set_event_callback": {
      "name": "client.set_event_callback",
      "description": "Raises an error and prints a message in console upon failure.",
      "args": [
        {
          "name": "event_name",
          "description": "Name of the event.",
          "type": "string"
        },
        {
          "name": "callback",
          "description": "Lua function to call when this event occurs.",
          "type": "function"
        }
      ]
    },
    "system_time": {
      "name": "client.system_time",
      "description": "Returns windows time as (hours, minutes, seconds, milliseconds)",
      "return_type": "number, number, number, number",
      "args": [

      ]
    },
    "timestamp": {
      "name": "client.timestamp",
      "description": "Returns high precision timestamp in milliseconds.",
      "return_type": "number",
      "args": [

      ]
    },
    "trace_bullet": {
      "name": "client.trace_bullet",
      "description": "Returns entindex, damage. Entindex is nil when no player is hit.",
      "return_type": "number, number",
      "args": [
        {
          "name": "from_player",
          "description": "Entity index of the player whose weapon will be used for this trace",
          "type": "number",
          "type_description": "entindex"
        },
        {
          "name": "from_x",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "from_y",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "from_z",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "to_x",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "to_y",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "to_z",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "skip_players",
          "description": "Pass true to skip expensive player hitbox checks when they're not needed.",
          "type": "boolean",
          "optional": true
        }
      ]
    },
    "trace_line": {
      "name": "client.trace_line",
      "description": "Returns fraction, entindex. fraction is a percentage in the range [0.0, 1.0] that tells you how far the trace went before hitting something, so 1.0 means nothing was hit. entindex is the entity index that hit, or -1 if no entity was hit.",
      "return_type": "number, number",
      "args": [
        {
          "name": "skip_entindex",
          "description": "Ignore this entity while tracing",
          "type": "number",
          "type_description": "entindex"
        },
        {
          "name": "from_x",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "from_y",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "from_z",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "to_x",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "to_y",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "to_z",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        }
      ]
    },
    "unix_time": {
      "name": "client.unix_time",
      "description": "Returns current windows time as [unix time / epoch time](https://en.wikipedia.org/wiki/Unix_time) (seconds since 1 January 1970 00:00:00)",
      "return_type": "number",
      "args": [

      ]
    },
    "unset_event_callback": {
      "name": "client.unset_event_callback",
      "description": "Removes the event callback for the passed event name and function. Raises an error and prints a message in console upon failure.",
      "args": [
        {
          "name": "event_name",
          "description": "Name of the event.",
          "type": "string"
        },
        {
          "name": "callback",
          "description": "Registered lua callback to remove.",
          "type": "function"
        }
      ]
    },
    "update_player_list": {
      "name": "client.update_player_list",
      "description": "Updates the player list tab without having to open it.",
      "args": [

      ]
    },
    "userid_to_entindex": {
      "name": "client.userid_to_entindex",
      "description": "Returns the entity index, or 0 on failure.",
      "return_type": "number",
      "args": [
        {
          "name": "userid",
          "description": "This is given by some game events.",
          "type": "number",
          "type_description": "user id"
        }
      ]
    },
    "visible": {
      "name": "client.visible",
      "description": "Returns true if the position is visible. For example, you could use a player's origin to see if they are visible.",
      "return_type": "boolean",
      "args": [
        {
          "name": "x",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "y",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "z",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        }
      ]
    }
  },
  "config": {
    "load": {
      "name": "config.load",
      "description": "Loads a configuration preset.",
      "args": [
        {
          "name": "name",
          "description": "Name of the configuration preset",
          "type": "string",
          "type_description": "menu item"
        }
      ]
    }
  },
  "cvar": {
    "get_float": {
      "name": "cvar_object:get_float",
      "description": "Returns nil if called on a ConCommand.",
      "return_type": "number",
      "args": [

      ]
    },
    "get_int": {
      "name": "cvar_object:get_int",
      "description": "Returns nil if called on a ConCommand.",
      "return_type": "number",
      "args": [

      ]
    },
    "get_string": {
      "name": "cvar_object:get_string",
      "description": "Returns nil on failure.",
      "return_type": "string",
      "args": [

      ]
    },
    "invoke_callback": {
      "name": "cvar_object:invoke_callback",
      "description": "Executes a ConCommand or cvar callback, passing its arguments to it",
      "args": [
        {
          "name": "...",
          "description": "Arguments passed to the callback"
        }
      ]
    },
    "set_float": {
      "name": "cvar_object:set_float",
      "description": "Sets the int, float and string value to the passed float. Invokes the change callback",
      "args": [
        {
          "name": "value",
          "description": "Float value",
          "type": "number",
          "type_description": "float"
        }
      ]
    },
    "set_int": {
      "name": "cvar_object:set_int",
      "description": "Sets the int, float and string value to the passed float. Invokes the change callback",
      "args": [
        {
          "name": "value",
          "description": "Integer value",
          "type": "number",
          "type_description": "integer"
        }
      ]
    },
    "set_raw_float": {
      "name": "cvar_object:set_raw_float",
      "description": "This sets the float value without changing the integer and string values.",
      "args": [
        {
          "name": "value",
          "description": "Float value",
          "type": "number",
          "type_description": "float"
        }
      ]
    },
    "set_raw_int": {
      "name": "cvar_object:set_raw_int",
      "description": "This sets the integer value without changing the float and string values.",
      "args": [
        {
          "name": "value",
          "description": "Integer value",
          "type": "number",
          "type_description": "integer"
        }
      ]
    },
    "set_string": {
      "name": "cvar_object:set_string",
      "description": "Sets the int, float and string value to the passed float. Invokes the change callback",
      "args": [
        {
          "name": "value",
          "description": "String value",
          "type": "string"
        }
      ]
    }
  },
  "database": {
    "read": {
      "name": "database.read",
      "description": "Gets a value from the database",
      "return_type": "any",
      "args": [
        {
          "name": "key_name",
          "description": "String used as a name of the key. Make sure to write to the same key_name.",
          "type": "string"
        }
      ]
    },
    "write": {
      "name": "database.write",
      "description": "Writes a value to the database. Avoid calling this often. For example, call read at script load, then call write during the 'shutdown' event",
      "args": [
        {
          "name": "key_name",
          "description": "String used as a name of the key.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "Value the key should be set to. This can be anything that can be sanitized (no functions, userdata)",
          "type": "any"
        }
      ]
    }
  },
  "entity": {
    "get_all": {
      "name": "entity.get_all",
      "description": "Returns an array of entity indices. Pass no arguments for all entities.",
      "return_type": "table",
      "return_description": "entindex",
      "args": [
        {
          "name": "classname",
          "description": "String that specifies the class name of entities that will be added to the list, for example \"CCSPlayer\".",
          "optional": true,
          "type": "string",
          "type_description": "entity classname"
        }
      ]
    },
    "get_bounding_box": {
      "name": "entity.get_bounding_box",
      "description": "Returns x1, y1, x2, y2, alpha_multiplier. The contents of x1, y1, x2, y2 must be ignored when alpha_multiplier is zero, which indicates that the bounding box is invalid and should not be drawn.",
      "return_type": "number, number, number, number, number",
      "args": [
        {
          "name": "player",
          "description": "Entity index of the player.",
          "type": "number",
          "type_description": "entindex"
        }
      ]
    },
    "get_classname": {
      "name": "entity.get_classname",
      "description": "Returns the name of the entity's class, or nil on failure.",
      "return_type": "string",
      "args": [
        {
          "name": "ent",
          "description": "Entity index.",
          "type": "number",
          "type_description": "entindex"
        }
      ]
    },
    "get_esp_data": {
      "name": "entity.get_esp_data",
      "description": "Returns a table containing alpha, health, and weapon_id, or nil on failure.",
      "return_type": "table",
      "args": [
        {
          "name": "ent",
          "description": "Entity index",
          "type": "number",
          "type_description": "entindex"
        }
      ]
    },
    "get_game_rules": {
      "name": "entity.get_game_rules",
      "description": "Returns entity index of CCSGameRulesProxy instance, or nil if none exists.",
      "return_type": "number",
      "return_description": "entindex",
      "args": [

      ]
    },
    "get_local_player": {
      "name": "entity.get_local_player",
      "description": "Returns the entity index for the local player, or nil on failure.",
      "return_type": "number",
      "return_description": "entindex",
      "args": [

      ]
    },
    "get_origin": {
      "name": "entity.get_origin",
      "description": "Returns the x, y, z coordinates of the entity. Only works for non-dormant entities, except for players, where it will return the dormant esp origin",
      "return_type": "number, number, number",
      "args": [
        {
          "name": "ent",
          "description": "Entity index",
          "type": "number",
          "type_description": "entindex"
        }
      ]
    },
    "get_player_name": {
      "name": "entity.get_player_name",
      "description": "Returns the player's name, or the string \"unknown\" on failure.",
      "return_type": "string",
      "args": [
        {
          "name": "ent",
          "description": "Player entity index.",
          "type": "number",
          "type_description": "entindex"
        }
      ]
    },
    "get_player_resource": {
      "name": "entity.get_player_resource",
      "description": "Returns entity index of CCSPlayerResource instance, or nil if none exists.",
      "return_type": "number",
      "return_description": "entindex",
      "args": [

      ]
    },
    "get_player_weapon": {
      "name": "entity.get_player_weapon",
      "description": "Returns the entity index of the player's active weapon, or nil if the player is not alive, dormant, etc.",
      "return_type": "number",
      "return_description": "entindex",
      "args": [
        {
          "name": "ent",
          "description": "Player entity index.",
          "type": "number",
          "type_description": "entindex"
        }
      ]
    },
    "get_players": {
      "name": "entity.get_players",
      "description": "Returns an array of player entity indices. Dormant and dead players will not be added to the list.",
      "return_type": "table",
      "return_description": "entindex",
      "args": [
        {
          "name": "enemies_only",
          "description": "If true then you and the players on your team will not be added to the list.",
          "optional": true,
          "type": "boolean"
        }
      ]
    },
    "get_prop": {
      "name": "entity.get_prop",
      "description": "Returns the value of the property, or nil on failure. For vectors or angles, this returns three values.",
      "return_type": "any",
      "args": [
        {
          "name": "ent",
          "description": "Entity index.",
          "type": "number",
          "type_description": "entindex"
        },
        {
          "name": "propname",
          "description": "Name of the networked property.",
          "type": "string",
          "type_description": "netprop"
        },
        {
          "name": "array_index",
          "description": "If propname is an array, the value at this array index will be returned.",
          "optional": true,
          "type": "number"
        }
      ]
    },
    "get_steam64": {
      "name": "entity.get_steam64",
      "description": "Returns steamID3, or nil on failure.",
      "return_type": "string",
      "args": [
        {
          "name": "player",
          "description": "Entity index of the player.",
          "type": "number",
          "type_description": "entindex"
        }
      ]
    },
    "hitbox_position": {
      "name": "entity.hitbox_position",
      "description": "Returns world coordinates x, y, z, or nil on failure.",
      "return_type": "number, number, number",
      "args": [
        {
          "name": "player",
          "description": "Entity index of the player.",
          "type": "number",
          "type_description": "entindex"
        },
        {
          "name": "hitbox",
          "description": "Either a string of the hitbox name, or an integer index of the hitbox.",
          "type": "number",
          "type_description": "hitbox id"
        }
      ]
    },
    "is_alive": {
      "name": "entity.is_alive",
      "description": "Returns true if the player is not dead.",
      "return_type": "boolean",
      "args": [
        {
          "name": "ent",
          "description": "Entity index.",
          "type": "number",
          "type_description": "entindex"
        }
      ]
    },
    "is_dormant": {
      "name": "entity.is_dormant",
      "description": "Returns true if the entity is dormant.",
      "return_type": "boolean",
      "args": [
        {
          "name": "ent",
          "description": "Entity index.",
          "type": "number",
          "type_description": "entindex"
        }
      ]
    },
    "is_enemy": {
      "name": "entity.is_enemy",
      "description": "Returns true if the entity is on the other team.",
      "return_type": "boolean",
      "args": [
        {
          "name": "ent",
          "description": "Entity index.",
          "type": "number",
          "type_description": "entindex"
        }
      ]
    },
    "set_prop": {
      "name": "entity.set_prop",
      "description": "Sets the value of the property. For vectors or angles, pass three values.",
      "args": [
        {
          "name": "ent",
          "description": "Entity index.",
          "type": "number",
          "type_description": "entindex"
        },
        {
          "name": "propname",
          "description": "Name of the networked property.",
          "type": "string",
          "type_description": "netprop"
        },
        {
          "name": "value",
          "description": "The property will be set to this value. For vectors or angles, separate the components by commas.",
          "type": "any"
        },
        {
          "name": "array_index",
          "description": "If propname is an array, the value at this array index will be set.",
          "optional": true,
          "type": "number"
        }
      ]
    }
  },
  "globals": {
    "absoluteframetime": {
      "name": "globals.absoluteframetime",
      "description": "Returns the number of seconds elapsed during the last game frame.",
      "return_type": "number",
      "args": [

      ]
    },
    "chokedcommands": {
      "name": "globals.chokedcommands",
      "description": "Returns the current number of commands that are being held back.",
      "return_type": "number",
      "args": [

      ]
    },
    "commandack": {
      "name": "globals.commandack",
      "description": "Returns the number of the command the server last acknowledged.",
      "return_type": "number",
      "args": [

      ]
    },
    "curtime": {
      "name": "globals.curtime",
      "description": "Returns the game time in seconds. This number is synchronized with the server.",
      "return_type": "number",
      "args": [

      ]
    },
    "framecount": {
      "name": "globals.framecount",
      "description": "Returns the number of frames since the game started",
      "return_type": "number",
      "args": [

      ]
    },
    "frametime": {
      "name": "globals.frametime",
      "description": "Returns the number of seconds elapsed during the last game frame.",
      "return_type": "number",
      "args": [

      ]
    },
    "lastoutgoingcommand": {
      "name": "globals.lastoutgoingcommand",
      "description": "Returns the command number of the last outgoing command.",
      "return_type": "number",
      "args": [

      ]
    },
    "mapname": {
      "name": "globals.mapname",
      "description": "Returns the name of the loaded map, or nil if you are not in game.",
      "return_type": "string",
      "args": [

      ]
    },
    "maxplayers": {
      "name": "globals.maxplayers",
      "description": "Returns the maximum number of players in the server.",
      "return_type": "number",
      "args": [

      ]
    },
    "oldcommandack": {
      "name": "globals.oldcommandack",
      "description": "Returns the previous server acknowledged command number.",
      "return_type": "number",
      "args": [

      ]
    },
    "realtime": {
      "name": "globals.realtime",
      "description": "Returns the local time in seconds.",
      "return_type": "number",
      "args": [

      ]
    },
    "tickcount": {
      "name": "globals.tickcount",
      "description": "Returns the number of ticks elapsed in the server.",
      "return_type": "number",
      "args": [

      ]
    },
    "tickinterval": {
      "name": "globals.tickinterval",
      "description": "Returns the time elapsed in one game tick in seconds.",
      "return_type": "number",
      "args": [

      ]
    }
  },
  "json": {
    "parse": {
      "name": "json.parse",
      "description": "Will deserialise any UTF-8 JSON string into a Lua value or table.",
      "args": [
        {
          "name": "json_text",
          "description": "JSON encoded UTF-8 string.",
          "type": "string"
        }
      ]
    },
    "stringify": {
      "name": "json.stringify",
      "description": "Will serialise a Lua value into a string containing the JSON representation.",
      "args": [
        {
          "name": "data",
          "description": "Data what be converted to json.",
          "type": "any"
        }
      ]
    }
  },
  "materialsystem": {
    "alpha_modulate": {
      "name": "material_object:alpha_modulate",
      "description": "Overrides the alpha of the material object it's called on. Doesn't work with some materials",
      "args": [
        {
          "name": "a",
          "description": "New alpha value of the material (0-255)",
          "type": "number"
        }
      ]
    },
    "arms_material": {
      "name": "materialsystem.arms_material",
      "description": "Returns the players hand cham material as an object.",
      "return_type": "table",
      "return_description": "material object",
      "args": [

      ]
    },
    "chams_material": {
      "name": "materialsystem.chams_material",
      "description": "Returns the players cham material as an object.",
      "return_type": "table",
      "return_description": "material object",
      "args": [

      ]
    },
    "color_modulate": {
      "name": "material_object:color_modulate",
      "description": "Overrides the color of the material object it's called on. Doesn't work with some materials",
      "args": [
        {
          "name": "r",
          "description": "New red value of the material (0-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "New green value of the material (0-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "New blue value of the material (0-255)",
          "type": "number"
        }
      ]
    },
    "find_material": {
      "name": "materialsystem.find_material",
      "description": "Returns a material object for the specified material.",
      "return_type": "table",
      "return_description": "material object",
      "args": [
        {
          "name": "material",
          "description": "The name of the material.",
          "type": "string"
        }
      ]
    },
    "find_materials": {
      "name": "materialsystem.find_materials",
      "description": "Returns all material objects that contain the specified material.",
      "return_type": "table",
      "return_description": "material objects",
      "args": [
        {
          "name": "materials",
          "description": "The substring that the material name must contain.",
          "type": "string"
        }
      ]
    },
    "find_texture": {
      "name": "materialsystem.find_texture",
      "description": "Returns a texture object for the specified material.",
      "args": [
        {
          "name": "material",
          "description": "The name of the material.",
          "type": "string"
        }
      ]
    },
    "get_material_var_flag": {
      "name": "material_object:get_material_var_flag",
      "description": "Returns the boolean value of the material var flag",
      "return_type": "boolean",
      "args": [
        {
          "name": "material_var_flag",
          "description": "Material var flag as number",
          "type": "number",
          "type_description": "material var flag"
        }
      ]
    },
    "get_model_materials": {
      "name": "materialsystem.get_model_materials",
      "description": "Returns all material objects for a specified entity.",
      "return_type": "table",
      "return_description": "material objects",
      "args": [
        {
          "name": "ent",
          "description": "The entity whos materials will be returned.",
          "type": "number",
          "type_description": "entindex"
        }
      ]
    },
    "get_shader_param": {
      "name": "material_object:get_shader_param",
      "description": "Returns the value of the shader param or nil",
      "return_type": "any",
      "args": [
        {
          "name": "shader_param",
          "description": "Shader param name",
          "type": "string",
          "type_description": "shader param"
        }
      ]
    },
    "override_material": {
      "name": "materialsystem.override_material",
      "description": "Overrides all of a material properties with another material.",
      "args": [
        {
          "name": "ent",
          "description": "The entity whos materials will be returned.",
          "type": "number",
          "type_description": "entindex"
        }
      ]
    },
    "reload": {
      "name": "material_object:reload",
      "description": "Restores the original material properties of the material it's called on.",
      "args": [

      ]
    },
    "set_material_var_flag": {
      "name": "material_object:set_material_var_flag",
      "description": "Sets the value of the material var flag of the material",
      "args": [
        {
          "name": "material_var_flag",
          "description": "Material var flag as number",
          "type": "number",
          "type_description": "material var flag"
        },
        {
          "name": "value",
          "description": "New boolean value of the material var flag",
          "type": "any"
        }
      ]
    },
    "set_shader_param": {
      "name": "material_object:set_shader_param",
      "description": "Sets the value of the shader param of the material",
      "args": [
        {
          "name": "shader_param",
          "description": "Shader param name",
          "type": "string",
          "type_description": "shader param"
        },
        {
          "name": "value",
          "description": "New value of the shader param",
          "type": "any"
        }
      ]
    }
  },
  "panorama": {
    "loadstring": {
      "name": "panorama.loadstring",
      "description": "This function behaves similar to lua's loadstring but executes JS code instead. It compiles the given chunk string of JS and returns a function to call it. Avoid generating JS code on-the-fly, instead return a table of functions, which you can then call in Lua. Arguments can be passed from Lua to JS functions.",
      "return_type": "table",
      "args": [
        {
          "name": "js_code",
          "description": "JSON encoded UTF-8 string.",
          "type": "string"
        },
        {
          "name": "root_panel",
          "description": "The root panel is an optional argument and controls in which panel context the code is executed. Some APIs, for example UIToolkitAPI, require a valid root panel context. Valid root panels (highlighted = you'll probably want to use one of these): CSGOJsRegistration, CSGOTripleMonitorBackground, CSGOHud, LightSelectionEnumDropDownMenuBg, LightSelectionEnumDropDownMenuBg, LightSelectionEnumDropDownMenuBg, LightSelectionEnumDropDownMenuBg, ChatTextEntryBoxIMEControls, CSGOMainMenu, ChatInputIMEControls, CSGOLoadingScreen, CSGOIntroMovie, CSGOPopups.",
          "type": "string",
          "optional": true
        }
      ]
    },
    "open": {
      "name": "panorama.open",
      "description": "Returns a JS context table that lets you call vanilla JS and panorama functions. Avoid calling this in event callbacks, instead, call it once and store its return value in a function.",
      "return_type": "table",
      "args": [
        {
          "name": "root_panel",
          "description": "The root panel is an optional argument and controls in which panel context the code is executed. Some APIs, for example UIToolkitAPI, require a valid root panel context. Valid root panels (highlighted = you'll probably want to use one of these): CSGOJsRegistration, CSGOTripleMonitorBackground, CSGOHud, LightSelectionEnumDropDownMenuBg, LightSelectionEnumDropDownMenuBg, LightSelectionEnumDropDownMenuBg, LightSelectionEnumDropDownMenuBg, ChatTextEntryBoxIMEControls, CSGOMainMenu, ChatInputIMEControls, CSGOLoadingScreen, CSGOIntroMovie, CSGOPopups.",
          "type": "string",
          "optional": true
        }
      ]
    }
  },
  "plist": {
    "get": {
      "name": "plist.get",
      "description": "Get the previously stored by plist.set variable at any entity.",
      "args": [
        {
          "name": "entindex",
          "description": "Entity index",
          "type": "number",
          "type_description": "entindex"
        },
        {
          "name": "variable_name",
          "description": "Variable name"
        }
      ]
    },
    "set": {
      "name": "plist.set",
      "description": "Set the special variable to any entity.",
      "args": [
        {
          "name": "entindex",
          "description": "Entity index",
          "type": "number",
          "type_description": "entindex"
        },
        {
          "name": "variable_name",
          "description": "Variable name"
        },
        {
          "name": "value",
          "description": "Value",
          "type": "any"
        }
      ]
    }
  },
  "renderer": {
    "circle": {
      "name": "renderer.circle",
      "description": "This can only be called from the paint callback.",
      "args": [
        {
          "name": "x",
          "description": "Screen coordinate",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "y",
          "description": "Screen coordinate",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "r",
          "description": "Red (1-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "Green (1-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "Blue (1-255)",
          "type": "number"
        },
        {
          "name": "a",
          "description": "Alpha (1-255)",
          "type": "number"
        },
        {
          "name": "radius",
          "description": "Radius of the circle in pixels.",
          "type": "number"
        },
        {
          "name": "start_degrees",
          "description": "0 is the right side, 90 is the bottom, 180 is the left, 270 is the top.",
          "type": "number",
          "type_description": "0 - 360"
        },
        {
          "name": "percentage",
          "description": "Must be within [0.0-1.0]. 1.0 is a full circle, 0.5 is a half circle, etc.",
          "type": "number",
          "type_description": "0 - 1"
        }
      ]
    },
    "circle_outline": {
      "name": "renderer.circle_outline",
      "description": "This can only be called from the paint callback.",
      "args": [
        {
          "name": "x",
          "description": "Screen coordinate",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "y",
          "description": "Screen coordinate",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "r",
          "description": "Red (1-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "Green (1-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "Blue (1-255)",
          "type": "number"
        },
        {
          "name": "a",
          "description": "Alpha (1-255)",
          "type": "number"
        },
        {
          "name": "radius",
          "description": "Radius of the circle in pixels.",
          "type": "number"
        },
        {
          "name": "start_degrees",
          "description": "0 is the right side, 90 is the bottom, 180 is the left, 270 is the top.",
          "type": "number",
          "type_description": "0 - 360"
        },
        {
          "name": "percentage",
          "description": "Must be within [0.0-1.0]. 1.0 is a full circle, 0.5 is a half circle, etc.",
          "type": "number",
          "type_description": "0 - 1"
        },
        {
          "name": "thickness",
          "description": "Thickness of the outline in pixels.",
          "type": "number",
          "type_description": "px"
        }
      ]
    },
    "gradient": {
      "name": "renderer.gradient",
      "description": "This can only be called from the paint callback.",
      "args": [
        {
          "name": "x",
          "description": "Screen coordinate",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "y",
          "description": "Screen coordinate",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "w",
          "description": "Width in pixels",
          "type": "number",
          "type_description": "px"
        },
        {
          "name": "h",
          "description": "Height in pixels",
          "type": "number",
          "type_description": "px"
        },
        {
          "name": "r1",
          "description": "Red (1-255)",
          "type": "number"
        },
        {
          "name": "g1",
          "description": "Green (1-255)",
          "type": "number"
        },
        {
          "name": "b1",
          "description": "Blue (1-255)",
          "type": "number"
        },
        {
          "name": "a1",
          "description": "Alpha (1-255)",
          "type": "number"
        },
        {
          "name": "r2",
          "description": "Red (1-255)",
          "type": "number"
        },
        {
          "name": "g2",
          "description": "Green (1-255)",
          "type": "number"
        },
        {
          "name": "b2",
          "description": "Blue (1-255)",
          "type": "number"
        },
        {
          "name": "a2",
          "description": "Alpha (1-255)",
          "type": "number"
        },
        {
          "name": "ltr",
          "description": "Left to right. Pass true for horizontal gradient, or false for vertical.",
          "type": "boolean"
        }
      ]
    },
    "indicator": {
      "name": "renderer.indicator",
      "description": "Returns the Y screen coordinate (vertical offset) of the drawn text, or nil on failure. This can only be called from the paint callback.",
      "return_type": "number",
      "args": [
        {
          "name": "r",
          "description": "Red (1-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "Green (1-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "Blue (1-255)",
          "type": "number"
        },
        {
          "name": "a",
          "description": "Alpha (1-255)",
          "type": "number"
        },
        {
          "name": "...",
          "description": "The text that will be drawn"
        }
      ]
    },
    "line": {
      "name": "renderer.line",
      "description": "This can only be called from the paint callback.",
      "args": [
        {
          "name": "xa",
          "description": "Screen coordinate of point A",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "ya",
          "description": "Screen coordinate of point A",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "xb",
          "description": "Screen coordinate of point B",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "yb",
          "description": "Screen coordinate of point B",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "r",
          "description": "Red (1-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "Green (1-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "Blue (1-255)",
          "type": "number"
        },
        {
          "name": "a",
          "description": "Alpha (1-255)",
          "type": "number"
        }
      ]
    },
    "load_jpg": {
      "name": "renderer.load_jpg",
      "description": "Loads a texture from raw JPG contents (with file header). Returns a texture ID that can be used with renderer.texture, or nil on failure",
      "return_type": "number",
      "return_description": "texture id",
      "args": [
        {
          "name": "contents",
          "description": "Raw JPG file contents",
          "type": "string"
        },
        {
          "name": "width",
          "description": "Image width",
          "type": "number",
          "type_description": "px"
        },
        {
          "name": "height",
          "description": "Image height",
          "type": "number",
          "type_description": "px"
        }
      ]
    },
    "load_png": {
      "name": "renderer.load_png",
      "description": "Loads a texture from raw png contents (with file header). Returns a texture ID that can be used with renderer.texture, or nil on failure",
      "return_type": "number",
      "return_description": "texture id",
      "args": [
        {
          "name": "contents",
          "description": "Raw PNG file contents",
          "type": "string"
        },
        {
          "name": "width",
          "description": "Image width",
          "type": "number",
          "type_description": "px"
        },
        {
          "name": "height",
          "description": "Image height",
          "type": "number",
          "type_description": "px"
        }
      ]
    },
    "load_rgba": {
      "name": "renderer.load_rgba",
      "description": "Loads a texture from a RGBA buffer. Returns a texture ID that can be used with renderer.texture, or nil on failure",
      "return_type": "number",
      "return_description": "texture id",
      "args": [
        {
          "name": "contents",
          "description": "RGBA buffer (hex encoded - red = \"\\xFF\\x00\\x00\\xFF\")",
          "type": "string"
        },
        {
          "name": "width",
          "description": "Width",
          "type": "number",
          "type_description": "px"
        },
        {
          "name": "height",
          "description": "Height",
          "type": "number",
          "type_description": "px"
        }
      ]
    },
    "load_svg": {
      "name": "renderer.load_svg",
      "description": "Returns a texture ID that can be used with renderer.texture, or nil on failure",
      "return_type": "number",
      "return_description": "texture id",
      "args": [
        {
          "name": "contents",
          "description": "SVG file contents",
          "type": "string"
        },
        {
          "name": "width",
          "description": "Width",
          "type": "number",
          "type_description": "px"
        },
        {
          "name": "height",
          "description": "Height",
          "type": "number",
          "type_description": "px"
        }
      ]
    },
    "measure_text": {
      "name": "renderer.measure_text",
      "description": "Returns width, height. This can only be called from the paint callback.",
      "return_type": "number, number",
      "args": [
        {
          "name": "flags",
          "description": "\"+\" for large text, \"-\" for small text, or nil for normal sized text.",
          "type": "string",
          "type_description": "text flags"
        },
        {
          "name": "...",
          "description": "Text that will be measured"
        }
      ]
    },
    "rectangle": {
      "name": "renderer.rectangle",
      "description": "This can only be called from the paint callback.",
      "args": [
        {
          "name": "x",
          "description": "Screen coordinate",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "y",
          "description": "Screen coordinate",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "w",
          "description": "Width in pixels",
          "type": "number",
          "type_description": "px"
        },
        {
          "name": "h",
          "description": "Height in pixels",
          "type": "number",
          "type_description": "px"
        },
        {
          "name": "r",
          "description": "Red (1-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "Green (1-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "Blue (1-255)",
          "type": "number"
        },
        {
          "name": "a",
          "description": "Alpha (1-255)",
          "type": "number"
        }
      ]
    },
    "text": {
      "name": "renderer.text",
      "description": "This can only be called from the paint callback.",
      "args": [
        {
          "name": "x",
          "description": "Screen coordinate",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "y",
          "description": "Screen coordinate",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "r",
          "description": "Red (1-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "Green (1-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "Blue (1-255)",
          "type": "number"
        },
        {
          "name": "a",
          "description": "Alpha (1-255)",
          "type": "number"
        },
        {
          "name": "flags",
          "description": "\"+\" for large text, \"-\" for small text, \"c\" for centered text, \"r\" for right-aligned text, \"b\" for bold text, \"d\" for text that scales with DPI. \"c\" and \"d\" can be combined with other flags. nil can be specified for normal sized uncentered text.",
          "type": "string",
          "type_description": "text flags"
        },
        {
          "name": "max_width",
          "description": "Text will be clipped if it exceeds this width in pixels. Use 0 for no limit.",
          "type": "number"
        },
        {
          "name": "...",
          "description": "Text that will be drawn"
        }
      ]
    },
    "texture": {
      "name": "renderer.texture",
      "description": "Draws a texture from the texture id created from load_rgba, load_png, load_jpg or load_svg",
      "args": [
        {
          "name": "id",
          "description": "Texture ID",
          "type": "number",
          "type_description": "texture id"
        },
        {
          "name": "x",
          "description": "X screen coordinate",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "y",
          "description": "Y screen coordinate",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "w",
          "description": "Width",
          "type": "number",
          "type_description": "px"
        },
        {
          "name": "h",
          "description": "Height",
          "type": "number",
          "type_description": "px"
        },
        {
          "name": "r",
          "description": "Red (0-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "Green (0-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "Blue (0-255)",
          "type": "number"
        },
        {
          "name": "a",
          "description": "Alpha (0-255)",
          "type": "number"
        },
        {
          "name": "flags",
          "description": "\"r\" for repeated/tiled textures, \"f\" to fill/stretch",
          "optional": true,
          "type": "string"
        }
      ]
    },
    "triangle": {
      "name": "renderer.triangle",
      "description": "This can only be called from the paint callback.",
      "args": [
        {
          "name": "x0",
          "description": "Screen coordinate X for point A",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "y0",
          "description": "Screen coordinate Y for point A",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "x1",
          "description": "Screen coordinate X for point B",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "y1",
          "description": "Screen coordinate Y for point B",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "x2",
          "description": "Screen coordinate X for point C",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "y2",
          "description": "Screen coordinate Y for point C",
          "type": "number",
          "type_description": "screen coordinate"
        },
        {
          "name": "r",
          "description": "Red (1-255)",
          "type": "number"
        },
        {
          "name": "g",
          "description": "Green (1-255)",
          "type": "number"
        },
        {
          "name": "b",
          "description": "Blue (1-255)",
          "type": "number"
        },
        {
          "name": "a",
          "description": "Alpha (1-255)",
          "type": "number"
        }
      ]
    },
    "world_to_screen": {
      "name": "renderer.world_to_screen",
      "description": "Returns two screen coordinates (x, y), or nil if the world position is not visible on your screen. This can only be called from the paint callback.",
      "return_type": "number, number, number",
      "args": [
        {
          "name": "x",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "y",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        },
        {
          "name": "z",
          "description": "Position in world space",
          "type": "number",
          "type_description": "world coordinate"
        }
      ]
    }
  },
  "ui": {
    "get": {
      "name": "ui.get",
      "description": "For a checkbox, returns true or false. For a slider, returns an integer. For a combobox, returns a string. For a multiselect combobox, returns an array of strings. For a hotkey, returns true if the hotkey is active. For a color picker, returns r, g, b, a. Throws an error on failure.",
      "return_type": "any",
      "args": [
        {
          "name": "item",
          "description": "The special value returned by ui.new_checkbox, ui.new_slider, ui.new_combobox, ui.new_hotkey, or ui.reference.",
          "type": "number",
          "type_description": "menu reference"
        }
      ]
    },
    "is_menu_open": {
      "name": "ui.is_menu_open",
      "description": "Returns true if the menu is currently open.",
      "return_type": "boolean",
      "args": [

      ]
    },
    "menu_position": {
      "name": "ui.menu_position",
      "description": "Returns the x, y of the menu, even when closed.",
      "return_type": "number, number",
      "args": [

      ]
    },
    "menu_size": {
      "name": "ui.menu_size",
      "description": "Returns the width, height of the menu, even when closed.",
      "return_type": "number, number",
      "args": [

      ]
    },
    "mouse_position": {
      "name": "ui.mouse_position",
      "description": "Returns current mouse coordinates x, y",
      "return_type": "number, number",
      "args": [

      ]
    },
    "name": {
      "name": "ui.name",
      "description": "Returns the name of the menu item reference passed to it. Throws an error on failure.",
      "return_type": "string",
      "args": [
        {
          "name": "item",
          "description": "The special value returned by ui.new_checkbox, ui.new_slider, ui.new_combobox, ui.new_hotkey, or ui.reference.",
          "type": "number",
          "type_description": "menu reference"
        }
      ]
    },
    "new_button": {
      "name": "ui.new_button",
      "description": "Throws an error on failure. The return value should not be used with ui.set or ui.get.",
      "return_type": "number",
      "return_description": "menu item",
      "args": [
        {
          "name": "tab",
          "description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, VISUALS or LUA.",
          "type": "string",
          "type_description": "menu tab"
        },
        {
          "name": "container",
          "description": "The name of the existing container to which this checkbox will be added.",
          "type": "string",
          "type_description": "menu container"
        },
        {
          "name": "name",
          "description": "The name of the button.",
          "type": "string",
          "type_description": "menu item"
        },
        {
          "name": "callback",
          "description": "The lua function that will be called when the button is pressed.",
          "type": "function"
        }
      ]
    },
    "new_checkbox": {
      "name": "ui.new_checkbox",
      "description": "Returns a special value that can be passed to ui.get and ui.set, or throws an error on failure.",
      "return_type": "number",
      "return_description": "menu item",
      "args": [
        {
          "name": "tab",
          "description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, VISUALS or LUA.",
          "type": "string",
          "type_description": "menu tab"
        },
        {
          "name": "container",
          "description": "The name of the existing container to which this control will be added.",
          "type": "string",
          "type_description": "menu container"
        },
        {
          "name": "name",
          "description": "The name of the checkbox.",
          "type": "string",
          "type_description": "menu item"
        }
      ]
    },
    "new_color_picker": {
      "name": "ui.new_color_picker",
      "description": "Throws an error on failure. The color picker is placed to the right of the previous menu item.",
      "return_type": "number",
      "return_description": "menu item",
      "args": [
        {
          "name": "tab",
          "description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, VISUALS or LUA.",
          "type": "string",
          "type_description": "menu tab"
        },
        {
          "name": "container",
          "description": "The name of the existing container to which this checkbox will be added.",
          "type": "string",
          "type_description": "menu container"
        },
        {
          "name": "name",
          "description": "The name of the color picker. This will not be shown, it is only used to identify this item in saved configs.",
          "type": "string",
          "type_description": "menu item"
        },
        {
          "name": "r",
          "description": "Initial red value (0-255)",
          "optional": true,
          "type": "number"
        },
        {
          "name": "g",
          "description": "Initial green value (0-255)",
          "optional": true,
          "type": "number"
        },
        {
          "name": "b",
          "description": "Initial blue value (0-255)",
          "optional": true,
          "type": "number"
        },
        {
          "name": "a",
          "description": "Initial alpha value (0-255)",
          "optional": true,
          "type": "number"
        }
      ]
    },
    "new_combobox": {
      "name": "ui.new_combobox",
      "description": "Returns a special value that can be passed to ui.get and ui.set, or throws an error on failure.",
      "return_type": "number",
      "return_description": "menu item",
      "args": [
        {
          "name": "tab",
          "description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, VISUALS or LUA.",
          "type": "string",
          "type_description": "menu tab"
        },
        {
          "name": "container",
          "description": "The name of the existing container to which this control will be added.",
          "type": "string",
          "type_description": "menu container"
        },
        {
          "name": "name",
          "description": "The name of the combobox.",
          "type": "string",
          "type_description": "menu item"
        },
        {
          "name": "...",
          "description": "One or more comma separated string values that will be added to the combobox. Alternatively, a table of strings that will be added."
        }
      ]
    },
    "new_hotkey": {
      "name": "ui.new_hotkey",
      "description": "Returns a special value that can be passed to ui.get to see if the hotkey is pressed, or throws an error on failure.",
      "return_type": "number",
      "return_description": "menu item",
      "args": [
        {
          "name": "tab",
          "description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, VISUALS or LUA.",
          "type": "string",
          "type_description": "menu tab"
        },
        {
          "name": "container",
          "description": "The name of the existing container to which this control will be added.",
          "type": "string",
          "type_description": "menu container"
        },
        {
          "name": "name",
          "description": "The name of the hotkey.",
          "type": "string",
          "type_description": "menu item"
        },
        {
          "name": "inline",
          "description": "Boolean. If set to true, the hotkey will be placed to the right of the preceding menu item.",
          "optional": true,
          "type": "boolean"
        }
      ]
    },
    "new_label": {
      "name": "ui.new_label",
      "description": "Creates a new label, this can be used to make otherwise attached menu items standalone or have interactive menus. Returns a special value that can be passed to ui.set, or throws an error on failure.",
      "return_type": "number",
      "return_description": "menu item",
      "args": [
        {
          "name": "tab",
          "description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, VISUALS or LUA.",
          "type": "string",
          "type_description": "menu tab"
        },
        {
          "name": "container",
          "description": "The name of the existing container to which this control will be added.",
          "type": "string",
          "type_description": "menu container"
        },
        {
          "name": "name",
          "description": "The name of the label. This can later be changed using ui.set.",
          "type": "string",
          "type_description": "menu item"
        }
      ]
    },
    "new_listbox": {
      "name": "ui.new_listbox",
      "description": "Returns a special value that can be passed to ui.get and ui.set, or throws an error on failure.",
      "return_type": "number",
      "return_description": "menu item",
      "args": [
        {
          "name": "tab",
          "description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, VISUALS or LUA.",
          "type": "string",
          "type_description": "menu tab"
        },
        {
          "name": "container",
          "description": "The name of the existing container to which this control will be added.",
          "type": "string",
          "type_description": "menu container"
        },
        {
          "name": "name",
          "description": "The name of the listbox.",
          "type": "string",
          "type_description": "menu item"
        },
        {
          "name": "...",
          "description": "One or more comma separated string values that will be added to the listbox. Alternatively, a table of strings that will be added."
        }
      ]
    },
    "new_multiselect": {
      "name": "ui.new_multiselect",
      "description": "Returns a special value that can be passed to ui.get and ui.set, or throws an error on failure.",
      "return_type": "number",
      "return_description": "menu item",
      "args": [
        {
          "name": "tab",
          "description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, VISUALS or LUA.",
          "type": "string",
          "type_description": "menu tab"
        },
        {
          "name": "container",
          "description": "The name of the existing container to which this control will be added.",
          "type": "string",
          "type_description": "menu container"
        },
        {
          "name": "name",
          "description": "The name of the multiselect.",
          "type": "string",
          "type_description": "menu item"
        },
        {
          "name": "...",
          "description": "One or more comma separated string values that will be added to the combobox. Alternatively, a table of strings that will be added."
        }
      ]
    },
    "new_slider": {
      "name": "ui.new_slider",
      "description": "Returns a special value that can be passed to ui.get and ui.set, or throws an error on failure.",
      "return_type": "number",
      "return_description": "menu item",
      "args": [
        {
          "name": "tab",
          "description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, VISUALS or LUA.",
          "type": "string",
          "type_description": "menu tab"
        },
        {
          "name": "container",
          "description": "The name of the existing container to which this control will be added.",
          "type": "string",
          "type_description": "menu container"
        },
        {
          "name": "name",
          "description": "The name of the slider.",
          "type": "string",
          "type_description": "menu item"
        },
        {
          "name": "min",
          "description": "The minimum value that can be set using the slider.",
          "type": "number"
        },
        {
          "name": "max",
          "description": "The maximum value that can be set using the slider.",
          "type": "number"
        },
        {
          "name": "init_value",
          "description": "Integer. The initial value. If not provided, the initial value will be min.",
          "optional": true,
          "type": "number"
        },
        {
          "name": "show_tooltip",
          "description": "Boolean. true if the slider should display its current value.",
          "optional": true,
          "type": "boolean"
        },
        {
          "name": "unit",
          "description": "String that is two characters or less. This will be appended to the display value. For example, \"px\" for pixels or \"%\" for a percentage.",
          "optional": true,
          "type": "string"
        },
        {
          "name": "scale",
          "description": "The display value will be multiplied by this scale. For example, 0.1 will make a slider with the range [0-1800] show as 0.0-180.0 with one decimal place.",
          "optional": true,
          "type": "number"
        },
        {
          "name": "tooltips",
          "description": "Table used to override the tooltip for the specified values. The key must be within min-max. The value is a string that will be shown instead of the numeric value whenever that value is selected.",
          "optional": true,
          "type": "table"
        }
      ]
    },
    "new_string": {
      "name": "ui.new_string",
      "description": "Creates a string UI element, can be used to store arbitrary strings in configs. No menu item is created but it has the same semantics as other ui.new_* functions. Returns a special value that can be passed to ui.get and ui.set, or throws an error on failure.",
      "return_type": "number",
      "return_description": "menu item",
      "args": [
        {
          "name": "name",
          "description": "The name of the string element, make sure this is unique.",
          "type": "string",
          "type_description": "menu item"
        },
        {
          "name": "default_value",
          "description": "Default value of the element.",
          "type": "string",
          "optional": true
        }
      ]
    },
    "new_textbox": {
      "name": "ui.new_textbox",
      "description": "Throws an error on failure. Returns a special value that can be used with ui.get",
      "return_type": "number",
      "return_description": "menu item",
      "args": [
        {
          "name": "tab",
          "description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, VISUALS or LUA.",
          "type": "string",
          "type_description": "menu tab"
        },
        {
          "name": "container",
          "description": "The name of the existing container to which this textbox will be added.",
          "type": "string",
          "type_description": "menu container"
        },
        {
          "name": "name",
          "description": "The name of the menu item.",
          "type": "string",
          "type_description": "menu item"
        }
      ]
    },
    "reference": {
      "name": "ui.reference",
      "description": "Avoid calling this from inside a function. Returns a reference that can be passed to ui.get and ui.set, or throws an error on failure. This allows you to access a built-in pre-existing menu items. This function returns multiple values when the specified menu item is followed by unnamed menu items, for example a color picker or a hotkey.",
      "return_type": "number",
      "return_description": "menu item",
      "args": [
        {
          "name": "tab",
          "description": "The name of the tab: AA, RAGE, LEGIT, MISC, PLAYERS, SKINS, VISUALS or LUA.",
          "type": "string",
          "type_description": "menu tab"
        },
        {
          "name": "container",
          "description": "The name of the existing container to which this checkbox will be added.",
          "type": "string",
          "type_description": "menu container"
        },
        {
          "name": "name",
          "description": "The name of the menu item.",
          "type": "string",
          "type_description": "menu item"
        }
      ]
    },
    "set": {
      "name": "ui.set",
      "description": "For checkboxes, pass true or false. For a slider, pass a number that is within the slider's minimum/maximum values. For a combobox, pass a string value. For a multiselect combobox, pass zero or more strings. For referenced buttons, param is ignored and the button's callback is invoked. For color pickers, pass the arguments r, g, b, a.",
      "args": [
        {
          "name": "item",
          "description": "The result of either ui.new_checkbox, ui.new_slider, or ui.reference.",
          "type": "number",
          "type_description": "menu reference"
        },
        {
          "name": "value",
          "description": "The value to which the menu item will be set.",
          "type": "any"
        },
        {
          "name": "...",
          "description": "For multiselect comboboxes, you may want to set more than one option.",
          "optional": true
        }
      ]
    },
    "set_callback": {
      "name": "ui.set_callback",
      "description": "Sets the change callback of a custom menu item. It will be executed on change and passed the reference",
      "args": [
        {
          "name": "item",
          "description": "The special value returned by ui.new_*. Do not try passing a reference to an existing menu item.",
          "type": "number",
          "type_description": "custom menu reference"
        },
        {
          "name": "callback",
          "description": "Lua function that will be called when the menu item changes values. For example, this will be called when the user checks or unchecks a checkbox.",
          "type": "function"
        }
      ]
    },
    "set_visible": {
      "name": "ui.set_visible",
      "description": "Sets the visibility of the menu item",
      "args": [
        {
          "name": "item",
          "description": "A menu item reference.",
          "type": "number",
          "type_description": "menu reference"
        },
        {
          "name": "visible",
          "description": "Boolean. Pass false to hide the control from the menu.",
          "type": "boolean"
        }
      ]
    },
    "update": {
      "name": "ui.update",
      "description": "Change current values for e.g. in listbox to passed.",
      "args": [
        {
          "name": "item",
          "description": "A menu item reference.",
          "type": "number",
          "type_description": "menu reference"
        },
        {
          "name": "...",
          "description": "New values for e.g. listbox. Can be passed comma separated values or just table."
        }
      ]
    }
  }
}